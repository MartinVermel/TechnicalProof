{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport const githubApi = createApi({\n  reducerPath: \"github\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://api.github.com/\"\n  }),\n  endpoints: builder => ({\n    searchRepositories: builder.query({\n      query: query => `search/repositories?q=${query}`,\n      transformResponse: response => response.items\n    }),\n    getRepoBranches: builder.query({\n      query: _ref => {\n        let {\n          owner,\n          repo\n        } = _ref;\n        return `repos/${owner}/${repo}/branches`;\n      }\n    }),\n    getRepoContributors: builder.query({\n      query: _ref2 => {\n        let {\n          owner,\n          repo\n        } = _ref2;\n        return `repos/${owner}/${repo}/contributors`;\n      }\n    })\n  })\n});\nexport const {\n  useSearchRepositoriesQuery,\n  useGetRepoBranchesQuery,\n  useGetRepoContributorsQuery\n} = githubApi;\n\n// import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// export const githubApi = createApi({\n//   baseQuery: fetchBaseQuery({ baseUrl: \"https://api.github.com/\" }),\n//   endpoints: (builder) => ({\n//     searchRepos: builder.query<any, string>({\n//       query: (query) => `search/repositories?q=${query}`,\n//     }),\n//     // getRepoCollab: builder.query<any, { owner: string|undefined; repo: string|undefined }>({\n//     //   query: ({ owner, repo, token }) => `repos/${owner}/${repo}/collaborators`,\n//     // }),\n\n//     GetRepoCollab: builder.query<any, {owner: string|undefined; repo: string|undefined; token: string}>({\n//       query: ({owner, repo, token}) => ({\n//         url: 'repos/${owner}/${repos}/collaborators',\n//         headers: {\n//           Authorization: 'token ${token}',\n//           Accept: 'application/vnd.github+json',\n//         },\n//       }),\n//     }),\n//   }),\n// });\n\n// export const { useSearchReposQuery, useGetRepoCollabQuery } = githubApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","githubApi","reducerPath","baseQuery","baseUrl","endpoints","builder","searchRepositories","query","transformResponse","response","items","getRepoBranches","_ref","owner","repo","getRepoContributors","_ref2","useSearchRepositoriesQuery","useGetRepoBranchesQuery","useGetRepoContributorsQuery"],"sources":["/home/martin/TechnicalProof/technicaltest/src/api.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\ninterface Repository {\n  id: number;\n  name: string;\n  full_name: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n  html_url: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  language: string;\n}\n\ninterface Branch {\n  name: string;\n  commit: {\n    sha: string;\n    url: string;\n  };\n}\n\ninterface Contributor {\n  login: string;\n  avatar_url: string;\n  html_url: string;\n  contributions: number;\n}\n\nexport const githubApi = createApi({\n  reducerPath: \"github\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"https://api.github.com/\" }),\n  endpoints: (builder) => ({\n    searchRepositories: builder.query<Array<Repository>, string>({\n      query: (query) => `search/repositories?q=${query}`,\n      transformResponse: (response: { items: Array<Repository> }) => response.items,\n    }),\n    getRepoBranches: builder.query<Array<Branch>, { owner: string; repo: string }>({\n      query: ({ owner, repo }) => `repos/${owner}/${repo}/branches`,\n    }),\n    getRepoContributors: builder.query<Array<Contributor>, { owner: string; repo: string }>({\n      query: ({ owner, repo }) => `repos/${owner}/${repo}/contributors`,\n    }),\n  }),\n});\n\nexport const {\n  useSearchRepositoriesQuery,\n  useGetRepoBranchesQuery,\n  useGetRepoContributorsQuery,\n} = githubApi;\n\n\n\n\n\n// import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// export const githubApi = createApi({\n//   baseQuery: fetchBaseQuery({ baseUrl: \"https://api.github.com/\" }),\n//   endpoints: (builder) => ({\n//     searchRepos: builder.query<any, string>({\n//       query: (query) => `search/repositories?q=${query}`,\n//     }),\n//     // getRepoCollab: builder.query<any, { owner: string|undefined; repo: string|undefined }>({\n//     //   query: ({ owner, repo, token }) => `repos/${owner}/${repo}/collaborators`,\n//     // }),\n\n//     GetRepoCollab: builder.query<any, {owner: string|undefined; repo: string|undefined; token: string}>({\n//       query: ({owner, repo, token}) => ({\n//         url: 'repos/${owner}/${repos}/collaborators',\n//         headers: {\n//           Authorization: 'token ${token}',\n//           Accept: 'application/vnd.github+json',\n//         },\n//       }),\n//     }),\n//   }),\n// });\n\n// export const { useSearchReposQuery, useGetRepoCollabQuery } = githubApi;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAgCxE,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAAC;EACjCG,WAAW,EAAE,QAAQ;EACrBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAA0B,CAAC,CAAC;EACjEC,SAAS,EAAGC,OAAO,KAAM;IACvBC,kBAAkB,EAAED,OAAO,CAACE,KAAK,CAA4B;MAC3DA,KAAK,EAAGA,KAAK,IAAM,yBAAwBA,KAAM,EAAC;MAClDC,iBAAiB,EAAGC,QAAsC,IAAKA,QAAQ,CAACC;IAC1E,CAAC,CAAC;IACFC,eAAe,EAAEN,OAAO,CAACE,KAAK,CAAiD;MAC7EA,KAAK,EAAEK,IAAA;QAAA,IAAC;UAAEC,KAAK;UAAEC;QAAK,CAAC,GAAAF,IAAA;QAAA,OAAM,SAAQC,KAAM,IAAGC,IAAK,WAAU;MAAA;IAC/D,CAAC,CAAC;IACFC,mBAAmB,EAAEV,OAAO,CAACE,KAAK,CAAsD;MACtFA,KAAK,EAAES,KAAA;QAAA,IAAC;UAAEH,KAAK;UAAEC;QAAK,CAAC,GAAAE,KAAA;QAAA,OAAM,SAAQH,KAAM,IAAGC,IAAK,eAAc;MAAA;IACnE,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXG,0BAA0B;EAC1BC,uBAAuB;EACvBC;AACF,CAAC,GAAGnB,SAAS;;AAMb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}